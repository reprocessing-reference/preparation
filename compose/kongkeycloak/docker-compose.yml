version: '2'

services:
#######################################
# reprobase database
#######################################
  database:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: "reprobaseline"
      POSTGRES_PASSWORD: ${REPROBASE_POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      - proxynet
    volumes:
      - /var/postgresql/data:/var/lib/postgresql/data

#######################################
# database of auxip service
#######################################
  database_auxip_olingo:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: "auxip"
      POSTGRES_PASSWORD: ${AUXIP_POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      - proxynet
    volumes:
      - /var/postgresql/data_auxip_olingo:/var/lib/postgresql/data

#######################################
# pgadmin4
#######################################
  pgadmin4:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: "user@domain.com"
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
     - database
    networks:
      - proxynet

#######################################
# reprobase
#######################################
  reprobase:
    image: reprobaseline:1.0
    restart: always
    environment:
      DATASOURCE_PASSWORD: ${REPROBASE_POSTGRES_PASSWORD}
    depends_on:
      - database
    networks:
      - proxynet
    volumes:
      - /reprobase_backup:/backup


#######################################
# auxip_olingo
#######################################
  auxip:
    image: auxip_olingo:0.0.2
    container_name : auxip
    restart: always
    environment:
      DATASOURCE_PASSWORD: ${AUXIP_POSTGRES_PASSWORD}
      S3_ACCESS_KEY: ${AUXIP_S3_ACCESS_KEY}
      S3_SECRET_KEY: ${AUXIP_S3_SECRET_KEY}
    depends_on:
      - database_auxip_olingo
    networks:
      - proxynet
    volumes:
      - /auxip_snapshot:/auxip_snapshot

#######################################
# keycloak DB
#######################################
  keycloak_db:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB:   keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: ${KEYCLOAK_POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      - proxynet
    volumes:
      - /var/postgresql/keycloak_datastore:/var/lib/postgresql/data
#######################################
# keycloak
#######################################
  keycloak:
    image: jboss/keycloak:12.0.4
    restart: always
    container_name: keycloak
    depends_on:
      - keycloak_db
    networks:
      - proxynet
    environment:
      DB_VENDOR:   POSTGRES
      DB_ADDR:     keycloak_db
      DB_PORT:     5432
      DB_DATABASE: keycloak
      DB_USER:     keycloak
      DB_PASSWORD: ${KEYCLOAK_POSTGRES_PASSWORD}
      KEYCLOAK_USER:     admin
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}
      PROXY_ADDRESS_FORWARDING: "true"
      KEYCLOAK_FRONTEND_URL: https://reprocessing-auxiliary.copernicus.eu/auth
    volumes:
      - ./data/keycloak/realms:/opt/jboss/keycloak/realm-config

    #   # import auxip realm configuration
    command: 
      [
        '-b',
        '0.0.0.0',
        '-Dkeycloak.profile.feature.upload_scripts=enabled',
        '-Dkeycloak.migration.action=import',
        '-Dkeycloak.migration.provider=dir',
        '-Dkeycloak.migration.dir=/opt/jboss/keycloak/realm-config',
        '-Dkeycloak.migration.strategy=IGNORE_EXISTING',
      ]

  #######################################
  # Kong 
  #######################################
  kong:
    build:
      context: ./      
    image: kong-oidc:latest
    restart: always
    container_name: kong
    depends_on:
      - certbot
    networks:
      - proxynet
    ports:
      #- "8000:8000" # Listener
      #- "8001:8001" # Admin API
      #- "8443:8443" # Listener  (SSL)
      #- "8444:8444" # Admin API (SSL)
      - 8001:8001
      - 8444:8444

    environment:
      KONG_DATABASE:         "off"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG:  /dev/stderr
      KONG_ADMIN_ERROR_LOG:  /dev/stderr
      # KONG_PROXY_LISTEN:     0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_ADMIN_LISTEN:     0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PLUGINS: bundled,oidc
      KONG_LOG_LEVEL:        debug
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml
      # KONG_NGINX_HTTP_INCLUDE: /etc/kong/kong.yml
      KONG_NGINX_PROXY_SET: "$$session_secret secret"
      KONG_SSL_CERT: /etc/letsencrypt/live/reprocessing-preparation.ml/fullchain.pem
      KONG_SSL_CERT_KEY: /etc/letsencrypt/live/reprocessing-preparation.ml/privkey.pem

    volumes:
      - ./data/kong:/etc/kong
      - ./data/certbot/conf:/etc/letsencrypt


#######################################
# Auxip_Rolling 
#######################################
  auxip_rolling:
    container_name: auxip_rolling
    image: rollingarchive:1.0.0
    restart: always
    environment:
      RCLONE_CONFIG_WASABI_ACCESS_KEY_ID: ${ROLLING_S3_ACCESS_KEY}
      RCLONE_CONFIG_WASABI_SECRET_ACCESS_KEY: ${ROLLING_S3_SECRET_KEY}
      RCLONE_CONFIG_WASABI_BUCKET: ${ROLLING_S3_BUCKET}
    depends_on:
      - auxip
    networks:
      - proxynet
    volumes:
      - /auxip_snapshot:/archives
      - /auxip_working:/working

#######################################
# Posgres backup 
#######################################
  posgres_backup:
    container_name: backup_postgres
    image: backup_postgres:1.0.0
    restart: always
    environment:
      RCLONE_CONFIG_WASABI_ACCESS_KEY_ID: ${ROLLING_S3_ACCESS_KEY}
      RCLONE_CONFIG_WASABI_SECRET_ACCESS_KEY: ${ROLLING_S3_SECRET_KEY}
      RCLONE_CONFIG_WASABI_BUCKET: ${BACKUP_S3_BUCKET}
      AUXIP_POSTGRES_PASSWORD: ${AUXIP_POSTGRES_PASSWORD}
      REPROBASE_POSTGRES_PASSWORD: ${REPROBASE_POSTGRES_PASSWORD}
      REPROCESSINGDATABASELINE_POSTGRES_PASSWORD: ${REPROCESSINGDATABASELINE_POSTGRES_PASSWORD}
    depends_on:
      - database
      - database_auxip_olingo
    networks:
      - proxynet
    volumes:
      - /postgres_backup:/backup


  #######################################
  # PRIP ingest 
  #######################################
  #prip_ingestion_s2:
  #  container_name: prip_ingestion
  #  image: prip_ingestion:1.0.0
  #  restart: always
  #  environment:
  #    S3_ACCESS_KEY: ${PRIPS2_S3_ACCESS_KEY}
  #    S3_SECRET_KEY: ${PRIPS2_S3_SECRET_KEY}
  #    S3_BUCKET: ${PRIPS2_S3_BUCKET}
  #    TIME_TO_SLEEP: ${PRIPS2_TIME_TO_SLEEP}
  #    PRIP_USER: ${PRIPS2_USER}
  #    PRIP_PASS: ${PRIPS2_PASS}
  #    AUXIP_USER: ${PRIPS2_AUXIP_USER}
  #    AUXIP_PASS: ${PRIPS2_AUXIP_PASS}
  #    MODE: ${PRIPS2_MODE}
  #    MCPATH: ${PRIPS2_MCPATH}
  #    S3_ENDPOINT: ${PRIPS2_ENDPOINT}
  #  depends_on:
  #    - auxip
  #    - reprobase
  #  networks:
  #    - proxynet
  #  volumes:
  #    - /grib2/prip_ingestion:/prip

  #######################################
  # ECMWF ingest 
  #######################################
  ecmwf_ingestion_s2:
    container_name: ecmwf_ingestion
    image: ecmwf_ingestion:1.0.0
    restart: always
    environment:
      S3_ACCESS_KEY: ${ECMWF_S3_ACCESS_KEY}
      S3_SECRET_KEY: ${ECMWF_S3_SECRET_KEY}
      S3_BUCKET: ${ECMWF_S3_BUCKET}
      TIME_PERIOD: ${ECMWF_TIME_TO_SLEEP}
      ECMWF_USER: ${ECMWF_USER}
      ECMWF_PASS: ${ECMWF_PASS}
      ECMWF_URL: ${ECMWF_URL}
      AUXIP_USER: ${ECMWF_AUXIP_USER}
      AUXIP_PASS: ${ECMWF_AUXIP_PASS}
      MODE: ${ECMWF_MODE}
      MCPATH: ${ECMWF_MCPATH}
      S3_ENDPOINT: ${ECMWF_ENDPOINT}
    depends_on:
      - auxip
      - reprobase
    networks:
      - proxynet
    volumes:
      - /grib2/ecmwf_ingestion:/ecmwf


  #######################################
  # ReprocessingDataBaseline database
  #######################################
  database_reprocessing:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: "reprocessingdatabaseline"
      POSTGRES_PASSWORD: ${REPROCESSINGDATABASELINE_POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      - proxynet
    volumes:
      - /var/postgresql/reprocessing_data_baseline:/var/lib/postgresql/data

  #######################################
  # Reprocessing Data Baseline Service 
  #######################################
  reprocessingdatabaseline:
    container_name: reprocessingdatabaseline
    image: reprocessing_data_baseline:1.0.0
    restart: always
    environment:
      DATASOURCE_PASSWORD: ${REPROCESSINGDATABASELINE_POSTGRES_PASSWORD}
    depends_on:
      - auxip
      - reprobase
      - database_reprocessing
    networks:
      - proxynet
    volumes:
      - /var/log/ReprocessingDataBaseline:/var/log/ReprocessingDataBaseline

  #######################################
  # proxy 
  #######################################
  proxy:
    image: nginx:1.19.5-alpine
    restart: always
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - proxynet
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./data/nginx:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - /auxip_snapshot:/etc/nginx/html/archives
      - /var/www/site:/etc/nginx/html/site
    depends_on:
      - certbot
  #######################################
  # certbot 
  #######################################
  certbot:
    image: certbot/certbot
    restart: always
    container_name: certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot

networks:
  proxynet:
      driver: bridge
      ipam:
        driver: default
        config:
          - subnet: "172.20.0.0/20"
            gateway: "172.20.0.1"

